def share_diagonal(x0, y0, x1, y1):
    """ Is (x0, y0) on a shared diagonal with (x1, y1)? """
    dy = abs(y1 - y0)        # Calc the absolute y distance
    dx = abs(x1 - x0)        # CXalc the absolute x distance
    return dx == dy          # They clash if dx == dy

def col_clashes(bs, c):
    """ Return True if the queen at column c clashes
         with any queen to its left.
    """
    for i in range(c):     # Look at all columns to the left of c
          if share_diagonal(i, bs[i], c, bs[c]):
              return True

    return False           # No clashes - col c has a safe placement.

def has_clashes(the_board):
    """ Determine whether we have any queens clashing on the diagonals.
        We're assuming here that the_board is a permutation of column
        numbers, so we're not explicitly checking row or column clashes.
    """
    for col in range(1,len(the_board)):
        if col_clashes(the_board, col):
            return True
    return False

def mirrorinx(x):
    List = []
    for i in x:
        w = 7 - i
        List.append(w)
    return (List)

def mirroriny(x):
    List = []
    for i in range(7,-1,-1):
        List.append(x[i])
    return List

def rotate90(x):
    List = [0,0,0,0,0,0,0,0]
    x_values = [0,1,2,3,4,5,6,7]
    y_values = x.copy()
    for i in range(0,8,1):
        currentx = x_values[i]
        currenty = y_values[i]
        newy = currentx
        newx = -(currenty) + 7
        List.remove(0)
        List.insert(newx,newy)
    return List



def rotate180(x):
    w = rotate90(x)
    return (rotate90(w))

def rotate270(x):
    List = [0,0,0,0,0,0,0,0]
    x_values = [0,1,2,3,4,5,6,7]
    y_values = x.copy()
    for i in range(0,8,1):
        currentx = x_values[i]
        currenty = y_values[i]
        newy = -currentx + 7
        newx = currenty
        List.remove(0)
        List.insert(newx,newy)
    return List

# Need to do rotate 90
# Then do 180, 270
# make an overall function
# add to queens function


def symmetry(x):
    List = []
    List.append(x)
    List.append(rotate90(x))
    List.append(rotate180(x))
    List.append(rotate270(x))
    List.append(mirrorinx(x))
    List.append(mirroriny(x))
    w = rotate90(x)
    List.append(mirrorinx(w))
    List.append(mirroriny(w))


    return List



def main():

    import random
    rng = random.Random()   # Instantiate a generator
    bd = list(range(8))     # Generate the initial permutation
    num_found = 0
    tries = 0
    List = []
    while num_found < 10:
       rng.shuffle(bd)
       tries += 1

       if not has_clashes(bd) and bd not in List:
           print("Found solution {0} in {1} tries.".format(bd, tries))
           if bd not in List:
              const = bd.copy()
              newlist = symmetry(const)
              for i in newlist:
                  List.append(i)

           tries = 0


           num_found += 1


main()





# 2
# CHANGE LINE 31
# CAN USE ABOUT 13

# 3
# Completed above

# 4
# Completed above
